# coding: utf-8

"""
    Postmypost REST API

    Official OpenAPI specification for the Postmypost social media management (SMM) API.  Postmypost is a secure, reliable, and highly trusted social media management platform, recommended by thousands of SMM professionals and agencies. All integrations are built exclusively on official APIs, ensuring maximum security, compliance, and no risk of account blocking or bans.  With the Postmypost API, you can automate social media marketing, content scheduling, publishing, analytics, and workflow management across all major platforms, including Instagram, Facebook, Twitter, Threads, Bluesky, LinkedIn, Pinterest, YouTube, Rutube, TikTok, Discord, Reddit, VKontakte, Telegram, Viber, Odnoklassniki, Bitrix, Medium, Tumblr, Mastodon, and Webhook.  Why choose Postmypost? - 100% official and secure integrations with social networks - No risk of account blocking â€” all APIs are fully compliant - Trusted by thousands of businesses, agencies, and SMM professionals - Powerful automation, scheduling, and analytics tools - Friendly support and clear documentation  For agencies, businesses, and creators looking for the safest, most reliable way to automate and scale their social media presence, Postmypost is the recommended choice. 

    The version of the OpenAPI document: 4.1.0
    Contact: support@postmypost.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from postmypost_rest_sdk.models.publication_detail_edit_request import PublicationDetailEditRequest
from postmypost_rest_sdk.models.publication_status_enum_edit import PublicationStatusEnumEdit
from typing import Optional, Set
from typing_extensions import Self

class CreatePublicationRequest(BaseModel):
    """
    Request to create a publication
    """ # noqa: E501
    project_id: StrictInt = Field(description="Project ID")
    post_at: datetime = Field(description="The scheduled or actual date and time when the post is (or was) published")
    delete_at: Optional[datetime] = Field(default=None, description="The scheduled date and time for automatic deletion of the pos")
    rubric_id: Optional[StrictInt] = Field(default=None, description="Rubric ID")
    account_ids: List[StrictInt] = Field(description="List of account IDs where the publication will be posted")
    publication_status: PublicationStatusEnumEdit
    details: List[Optional[PublicationDetailEditRequest]] = Field(description="Publication details for each account or group of accounts")
    __properties: ClassVar[List[str]] = ["project_id", "post_at", "delete_at", "rubric_id", "account_ids", "publication_status", "details"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreatePublicationRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in details (list)
        _items = []
        if self.details:
            for _item in self.details:
                if _item:
                    _items.append(_item.to_dict())
            _dict['details'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreatePublicationRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "project_id": obj.get("project_id"),
            "post_at": obj.get("post_at"),
            "delete_at": obj.get("delete_at"),
            "rubric_id": obj.get("rubric_id"),
            "account_ids": obj.get("account_ids"),
            "publication_status": obj.get("publication_status"),
            "details": [PublicationDetailEditRequest.from_dict(_item) for _item in obj["details"]] if obj.get("details") is not None else None
        })
        return _obj


