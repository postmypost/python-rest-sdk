# coding: utf-8

"""
    Postmypost REST API

    Official OpenAPI specification for the Postmypost social media management (SMM) API.  Postmypost is a secure, reliable, and highly trusted social media management platform, recommended by thousands of SMM professionals and agencies. All integrations are built exclusively on official APIs, ensuring maximum security, compliance, and no risk of account blocking or bans.  With the Postmypost API, you can automate social media marketing, content scheduling, publishing, analytics, and workflow management across all major platforms, including Instagram, Facebook, Twitter, Threads, Bluesky, LinkedIn, Pinterest, YouTube, Rutube, TikTok, Discord, Reddit, VKontakte, Telegram, Viber, Odnoklassniki, Bitrix, Medium, Tumblr, Mastodon, and Webhook.  Why choose Postmypost? - 100% official and secure integrations with social networks - No risk of account blocking â€” all APIs are fully compliant - Trusted by thousands of businesses, agencies, and SMM professionals - Powerful automation, scheduling, and analytics tools - Friendly support and clear documentation  For agencies, businesses, and creators looking for the safest, most reliable way to automate and scale their social media presence, Postmypost is the recommended choice. 

    The version of the OpenAPI document: 4.1.4
    Contact: support@postmypost.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from postmypost_rest_sdk.models.publication_detail_publication_type_enum import PublicationDetailPublicationTypeEnum
from postmypost_rest_sdk.models.publication_detail_tik_tok_privacy_status_enum import PublicationDetailTikTokPrivacyStatusEnum
from postmypost_rest_sdk.models.publication_detail_x_reply_settings_enum import PublicationDetailXReplySettingsEnum
from postmypost_rest_sdk.models.publication_detail_you_tube_privacy_status_enum import PublicationDetailYouTubePrivacyStatusEnum
from typing import Optional, Set
from typing_extensions import Self

class PublicationDetailEditRequest(BaseModel):
    """
    Parameters for creating or updating publication details
    """ # noqa: E501
    account_id: Optional[StrictInt] = Field(default=None, description="Account ID")
    publication_type: PublicationDetailPublicationTypeEnum
    content: Optional[StrictStr] = Field(default=None, description="Publication text")
    comment: Optional[StrictStr] = Field(default=None, description="First comment on the publication")
    link: Optional[StrictStr] = Field(default=None, description="External link for the publication")
    title: Optional[StrictStr] = Field(default=None, description="Publication title")
    tiktok_comment: Optional[StrictBool] = Field(default=None, description="Allow comments on TikTok")
    tiktok_duet: Optional[StrictBool] = Field(default=None, description="Allow duets on TikTok")
    tiktok_stitch: Optional[StrictBool] = Field(default=None, description="Allow stitch on TikTok")
    tiktok_privacy_status: Optional[PublicationDetailTikTokPrivacyStatusEnum] = None
    youtube_privacy_status: Optional[PublicationDetailYouTubePrivacyStatusEnum] = None
    x_reply_settings: Optional[PublicationDetailXReplySettingsEnum] = None
    instagram_share_to_feed: Optional[StrictBool] = Field(default=None, description="Share to Instagram feed")
    nsfw: Optional[StrictBool] = Field(default=None, description="Not safe for work flag")
    file_ids: Optional[List[StrictInt]] = Field(default=None, description="File IDs")
    __properties: ClassVar[List[str]] = []

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PublicationDetailEditRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PublicationDetailEditRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
        })
        return _obj


