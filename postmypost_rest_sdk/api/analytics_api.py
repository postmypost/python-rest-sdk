# coding: utf-8

"""
    Postmypost REST API

    Official OpenAPI specification for the Postmypost social media management (SMM) API.  Postmypost is a secure, reliable, and highly trusted social media management platform, recommended by thousands of SMM professionals and agencies. All integrations are built exclusively on official APIs, ensuring maximum security, compliance, and no risk of account blocking or bans.  With the Postmypost API, you can automate social media marketing, content scheduling, publishing, analytics, and workflow management across all major platforms, including Instagram, Facebook, Twitter, Threads, Bluesky, LinkedIn, Pinterest, YouTube, Rutube, TikTok, Discord, Reddit, VKontakte, Telegram, Viber, Odnoklassniki, Bitrix, Medium, Tumblr, Mastodon, and Webhook.  Why choose Postmypost? - 100% official and secure integrations with social networks - No risk of account blocking â€” all APIs are fully compliant - Trusted by thousands of businesses, agencies, and SMM professionals - Powerful automation, scheduling, and analytics tools - Friendly support and clear documentation  For agencies, businesses, and creators looking for the safest, most reliable way to automate and scale their social media presence, Postmypost is the recommended choice. 

    The version of the OpenAPI document: 4.1.4
    Contact: support@postmypost.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import date
from pydantic import Field, StrictInt, StrictStr
from typing_extensions import Annotated
from postmypost_rest_sdk.models.account_analytics_response import AccountAnalyticsResponse
from postmypost_rest_sdk.models.publication_analytics_response import PublicationAnalyticsResponse

from postmypost_rest_sdk.api_client import ApiClient, RequestSerialized
from postmypost_rest_sdk.api_response import ApiResponse
from postmypost_rest_sdk.rest import RESTResponseType


class AnalyticsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_analytics_accounts(
        self,
        project_id: Annotated[StrictInt, Field(description="Project ID")],
        account_id: Annotated[StrictStr, Field(description="Account ID")],
        date_from: Annotated[date, Field(description="Start date of the period (YYYY-MM-DD)")],
        date_to: Annotated[date, Field(description="End date of the period (YYYY-MM-DD)")],
        metrics: Annotated[StrictStr, Field(description="Comma-separated list of metrics (e.g., followers,subscribed)")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AccountAnalyticsResponse:
        """Get account analytics

        Retrieve account metrics (e.g., number of followers) for a specified period.

        :param project_id: Project ID (required)
        :type project_id: int
        :param account_id: Account ID (required)
        :type account_id: str
        :param date_from: Start date of the period (YYYY-MM-DD) (required)
        :type date_from: date
        :param date_to: End date of the period (YYYY-MM-DD) (required)
        :type date_to: date
        :param metrics: Comma-separated list of metrics (e.g., followers,subscribed) (required)
        :type metrics: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_analytics_accounts_serialize(
            project_id=project_id,
            account_id=account_id,
            date_from=date_from,
            date_to=date_to,
            metrics=metrics,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AccountAnalyticsResponse",
            '400': "BadRequestError",
            '401': "UnauthorizedError",
            '403': "ForbiddenError",
            '404': "NotFoundError",
            '422': "UnprocessableEntityError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_analytics_accounts_with_http_info(
        self,
        project_id: Annotated[StrictInt, Field(description="Project ID")],
        account_id: Annotated[StrictStr, Field(description="Account ID")],
        date_from: Annotated[date, Field(description="Start date of the period (YYYY-MM-DD)")],
        date_to: Annotated[date, Field(description="End date of the period (YYYY-MM-DD)")],
        metrics: Annotated[StrictStr, Field(description="Comma-separated list of metrics (e.g., followers,subscribed)")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AccountAnalyticsResponse]:
        """Get account analytics

        Retrieve account metrics (e.g., number of followers) for a specified period.

        :param project_id: Project ID (required)
        :type project_id: int
        :param account_id: Account ID (required)
        :type account_id: str
        :param date_from: Start date of the period (YYYY-MM-DD) (required)
        :type date_from: date
        :param date_to: End date of the period (YYYY-MM-DD) (required)
        :type date_to: date
        :param metrics: Comma-separated list of metrics (e.g., followers,subscribed) (required)
        :type metrics: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_analytics_accounts_serialize(
            project_id=project_id,
            account_id=account_id,
            date_from=date_from,
            date_to=date_to,
            metrics=metrics,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AccountAnalyticsResponse",
            '400': "BadRequestError",
            '401': "UnauthorizedError",
            '403': "ForbiddenError",
            '404': "NotFoundError",
            '422': "UnprocessableEntityError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_analytics_accounts_without_preload_content(
        self,
        project_id: Annotated[StrictInt, Field(description="Project ID")],
        account_id: Annotated[StrictStr, Field(description="Account ID")],
        date_from: Annotated[date, Field(description="Start date of the period (YYYY-MM-DD)")],
        date_to: Annotated[date, Field(description="End date of the period (YYYY-MM-DD)")],
        metrics: Annotated[StrictStr, Field(description="Comma-separated list of metrics (e.g., followers,subscribed)")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get account analytics

        Retrieve account metrics (e.g., number of followers) for a specified period.

        :param project_id: Project ID (required)
        :type project_id: int
        :param account_id: Account ID (required)
        :type account_id: str
        :param date_from: Start date of the period (YYYY-MM-DD) (required)
        :type date_from: date
        :param date_to: End date of the period (YYYY-MM-DD) (required)
        :type date_to: date
        :param metrics: Comma-separated list of metrics (e.g., followers,subscribed) (required)
        :type metrics: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_analytics_accounts_serialize(
            project_id=project_id,
            account_id=account_id,
            date_from=date_from,
            date_to=date_to,
            metrics=metrics,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AccountAnalyticsResponse",
            '400': "BadRequestError",
            '401': "UnauthorizedError",
            '403': "ForbiddenError",
            '404': "NotFoundError",
            '422': "UnprocessableEntityError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_analytics_accounts_serialize(
        self,
        project_id,
        account_id,
        date_from,
        date_to,
        metrics,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if project_id is not None:
            
            _query_params.append(('project_id', project_id))
            
        if account_id is not None:
            
            _query_params.append(('account_id', account_id))
            
        if date_from is not None:
            if isinstance(date_from, date):
                _query_params.append(
                    (
                        'date_from',
                        date_from.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('date_from', date_from))
            
        if date_to is not None:
            if isinstance(date_to, date):
                _query_params.append(
                    (
                        'date_to',
                        date_to.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('date_to', date_to))
            
        if metrics is not None:
            
            _query_params.append(('metrics', metrics))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'BearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/analytics/accounts',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_analytics_publications(
        self,
        project_id: Annotated[StrictInt, Field(description="Project ID")],
        account_id: Annotated[StrictStr, Field(description="Account ID")],
        date_from: Annotated[date, Field(description="Start date of the period (YYYY-MM-DD)")],
        date_to: Annotated[date, Field(description="End date of the period (YYYY-MM-DD)")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PublicationAnalyticsResponse:
        """Get publications analytics

        Retrieve post analytics by account and project for a specified period.

        :param project_id: Project ID (required)
        :type project_id: int
        :param account_id: Account ID (required)
        :type account_id: str
        :param date_from: Start date of the period (YYYY-MM-DD) (required)
        :type date_from: date
        :param date_to: End date of the period (YYYY-MM-DD) (required)
        :type date_to: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_analytics_publications_serialize(
            project_id=project_id,
            account_id=account_id,
            date_from=date_from,
            date_to=date_to,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PublicationAnalyticsResponse",
            '400': "BadRequestError",
            '401': "UnauthorizedError",
            '403': "ForbiddenError",
            '404': "NotFoundError",
            '422': "UnprocessableEntityError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_analytics_publications_with_http_info(
        self,
        project_id: Annotated[StrictInt, Field(description="Project ID")],
        account_id: Annotated[StrictStr, Field(description="Account ID")],
        date_from: Annotated[date, Field(description="Start date of the period (YYYY-MM-DD)")],
        date_to: Annotated[date, Field(description="End date of the period (YYYY-MM-DD)")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PublicationAnalyticsResponse]:
        """Get publications analytics

        Retrieve post analytics by account and project for a specified period.

        :param project_id: Project ID (required)
        :type project_id: int
        :param account_id: Account ID (required)
        :type account_id: str
        :param date_from: Start date of the period (YYYY-MM-DD) (required)
        :type date_from: date
        :param date_to: End date of the period (YYYY-MM-DD) (required)
        :type date_to: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_analytics_publications_serialize(
            project_id=project_id,
            account_id=account_id,
            date_from=date_from,
            date_to=date_to,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PublicationAnalyticsResponse",
            '400': "BadRequestError",
            '401': "UnauthorizedError",
            '403': "ForbiddenError",
            '404': "NotFoundError",
            '422': "UnprocessableEntityError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_analytics_publications_without_preload_content(
        self,
        project_id: Annotated[StrictInt, Field(description="Project ID")],
        account_id: Annotated[StrictStr, Field(description="Account ID")],
        date_from: Annotated[date, Field(description="Start date of the period (YYYY-MM-DD)")],
        date_to: Annotated[date, Field(description="End date of the period (YYYY-MM-DD)")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get publications analytics

        Retrieve post analytics by account and project for a specified period.

        :param project_id: Project ID (required)
        :type project_id: int
        :param account_id: Account ID (required)
        :type account_id: str
        :param date_from: Start date of the period (YYYY-MM-DD) (required)
        :type date_from: date
        :param date_to: End date of the period (YYYY-MM-DD) (required)
        :type date_to: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_analytics_publications_serialize(
            project_id=project_id,
            account_id=account_id,
            date_from=date_from,
            date_to=date_to,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PublicationAnalyticsResponse",
            '400': "BadRequestError",
            '401': "UnauthorizedError",
            '403': "ForbiddenError",
            '404': "NotFoundError",
            '422': "UnprocessableEntityError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_analytics_publications_serialize(
        self,
        project_id,
        account_id,
        date_from,
        date_to,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if project_id is not None:
            
            _query_params.append(('project_id', project_id))
            
        if account_id is not None:
            
            _query_params.append(('account_id', account_id))
            
        if date_from is not None:
            if isinstance(date_from, date):
                _query_params.append(
                    (
                        'date_from',
                        date_from.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('date_from', date_from))
            
        if date_to is not None:
            if isinstance(date_to, date):
                _query_params.append(
                    (
                        'date_to',
                        date_to.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('date_to', date_to))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'BearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/analytics/publications',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


